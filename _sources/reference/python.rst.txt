##########
Python API
##########

*************
Basic Classes
*************

EOS provides its basic functionality via the main ``eos`` module.


.. autoclass:: eos.Constraints
   :inherited-members:
   :members:

.. autoclass:: eos.Kinematics
   :inherited-members:
   :members:

.. autoclass:: eos.LogLikelihood
   :members:

.. autoclass:: eos.LogPrior
   :members:

.. autoclass:: eos.LogPosterior
   :members:

.. autoclass:: eos.Observable
   :members:

.. autoclass:: eos.Observables
   :inherited-members:
   :members:

.. autoclass:: eos.Options
   :members:

.. autoclass:: eos.Parameter
   :members:

.. autoclass:: eos.Parameters
   :inherited-members:
   :members:

.. autoclass:: eos.QualifiedName
   :members:

.. autoclass:: eos.SignalPDF
   :inherited-members:
   :members:

.. autoclass:: eos.SignalPDFs
   :inherited-members:
   :members:

.. autoclass:: eos.Unit
   :members:


**************
Common Classes
**************

EOS provides common classes for use in statistical analyses via the main ``eos`` module.


.. autoclass:: eos.Analysis
   :members:

   .. _eos-Analysis-prior-descriptions:

   Each prior description is a dictionary with the following mandatory elements:

   * **type** (*str*) -- The type specification of the prior. Must be one of ``uniform``, ``flat``, or ``gaussian``.
   * **parameter** (*str*) -- The name of the parameter for which the prior shall apply.
   * **min** (*float*) -- The lower boundary of the prior's support.
   * **max** (*float*) -- The upper boundary of the prior's support.

   A ``uniform`` or ``flat`` prior does not require any further description. A ``gaussian`` prior requires in addition
   providing the following two elements:

   * **central** (*float*) -- The median value of the parameter.
   * **sigma** (*float*, or *list*, *tuple* of *float*) -- The width of the 68% probability interval. If a list or tuple
     of two numbers is provided, the prior will by a asymmetric but continuous. The two values are then taken to be the
     distance to the lower and upper end of the 68% probability interval.

.. autoclass:: eos.AnalysisFile
   :members:

.. autoclass:: eos.BestFitPoint
   :members:

.. autoclass:: eos.GoodnessOfFit
   :members:

.. autoclass:: eos.ObservableCache
   :members:


.. _api_eos_tasks:

************
Common Tasks
************

In addition to the basic classes, EOS provides functions to carry out often-repeated tasks,
such as finding the mode of a posterior, sampling from a posterior, and similar.
Tasks require a description of the statistical analysis (see :class:`eos.Analysis`) by means
of an analysis file. For a documentation of its format, see :class:`eos.AnalysisFile`.

Tasks store their results in a hierarchy for directories below a user-provided base directory.
This ensures that tasks can readily use results produced by another task.

.. autofunction:: eos.corner_plot

.. autofunction:: eos.create_mask

.. autofunction:: eos.draw_figure

.. autofunction:: eos.find_clusters

.. autofunction:: eos.find_mode

.. autofunction:: eos.list_figures

.. autofunction:: eos.list_step_dependencies

.. autofunction:: eos.list_steps

.. autofunction:: eos.mixture_product

.. autofunction:: eos.predict_observables

.. autofunction:: eos.report

.. autofunction:: eos.run

.. autofunction:: eos.sample_mcmc

.. autofunction:: eos.sample_nested

.. autofunction:: eos.sample_pmc

.. autofunction:: eos.sample_prior

.. autofunction:: eos.validate



**************
Accessing Data
**************

EOS provides access to save and load the various (intermediate) results of analyses via the ``eos.data`` module.


.. autoclass:: eos.data.ImportanceSamples
   :members:

.. autoclass:: eos.data.MarkovChain
   :members:

.. autoclass:: eos.data.MixtureDensity
   :members:

.. autoclass:: eos.data.Mode
   :members:

.. autoclass:: eos.data.PMCSampler
   :members:

.. autoclass:: eos.data.Prediction
   :members:


********
Plotting
********

EOS provides a plotting framework based on `Matplotlib <https://matplotlib.org/>`_.
Plots can readily be created from a Python script, from within a Jupyter notebook,
or in the command line using the ``eos-plot`` script.
For all of these cases a description of the plot is required in the format described below.
For the command-line script ``eos-plot``, the Python dictionary describing the plots must be provided as a YAML file.

.. note::

   Import ``eos.plot`` before you do something like ``import matplotlib.pyplot as plt``,
   because the ``eos.plot`` module sets its default plot style and a matplotlib backend.
   All options (except the backend) can be overwritten by updating ``matplotlib.rcParams[...]``;
   see also the ``matplotlib`` documentation.
   Note that the default settings use LaTeX to create labels and math expressions,
   so for this to work latex needs to be available on your system.

.. autoclass:: eos.plot.Plotter
   :members:

Plot description format
=======================

The input must be formatted as a dictionary containing the keys ``plot`` and ``contents``.
The ``plot`` key must be mapped to a dictionary; it describes the layout of the plot,
including axis labels, positioning of the key, and similar settings.
The ``contents`` key must be mapped to a list; it describes the contents of the plot,
expressed in terms of independent plot items.

.. code-block::

   plot_desc = {
       'plot': {
           'x': { ... },       # description of the x axis
           'y': { ... },       # description of the y axis
           'legend': { ... },  # description of the legend
           ...                 # further layouting options
       },
       'contents': [
           { ... }, # first plot item
           { ... }, # second plot item
       ]
   }
   eos.plot.Plotter(plot_desc, FILENAME).plot()

In the above, ``FILENAME`` is an optional argument naming the file into which the plot shall be placed.
The format is automatically determined based on the file name extension.

Plot Layouting
--------------

By default plots lack any axis labels and units, and any legend.

An axis' description is provided through the following key/value pairs, which can apply equally to the x and y axis:

 * ``label`` (*str*, may contain LaTeX commands) -- The axis' label.
 * ``unit``  (*str*, may contain LaTeX commands) -- The axis' unit, which will be appended to the axis' label in square brackets.
 * ``range`` (*list* or *tuple* of two *float*) -- The tuple of [minimal, maximal] values, which will be displayed along the axis.
 * ``scale`` (*str*) -- Can be either ``linear`` or ``log``.
 * ``scaling_factor`` (*number*) -- The axis' scale by which all tick coordinates will be divided. The scale will *not* be appended to
   the axis' label automatically. Using this argument is not recommended as it prevents automatic axis tick formatting and providing
   the argument below is required.
 * ``format`` (*str*, Python 3 format string) -- The axis' tick label format can be provided and is only in use when ``scale`` is used, to
   avoid a bad string representation of the axis ticks. For example, the user might need to determine the necessary number of digits
   manually. Due to a Matplotlib peculiarity, the format string must always format the variable ``x``. See Matplotlib format strings for
   details.

The legend description presently only includes options for its location:

 * ``location`` (*str*, valid Matplotlib legend location) -- The legend's location within the plot.

Further layouting options are:

 * ``title`` (*str*) -- The plot's title.
 * ``size`` (*tuple of two numbers*) -- The plot's size in x and y directions provided in centimeters.
 * ``axes`` (*str*, ``equal``) -- Enforces equal scaling of the plot's x and y axes, if set.
 * ``grid`` (*str*, either ``major``, ``minor``, or ``both``) -- Enables the plot's gridline, if set.

An example illustrating plot layouting follows:

.. code-block::

   plot_args = {
       'plot': {
           'x': { 'label': r'$q^2$', 'unit': r'$\textnormal{GeV}^2$', 'range': [0.0, 11.60] },
           'y': { 'label': r'$d\mathcal{B}/dq^2$',                    'range': [0.0,  5e-3] },
           'legend': { 'location': 'upper center' },
           'size': [10, 5]
       },
       'contents': [
           ...
       ]
   }

Plot Contents
-------------

Each item in a plot's contents is represented by a dictionary.
Each features the mandatory ``type`` key and more type-specific (mandatory or optional) keys.

 * ``type`` (*str*, mandatory) -- The type of the plot item, from one of the following recognized item types:

   .. list-table::
      :widths: auto
      :header-rows: 1

      * - value
        - description
      * - ``band``
        - Plots a shaded band
      * - ``constraint``
        - Plots constraints from the EOS library of experimental and theoretical likelihoods
      * - ``constraint2D``
        - Plot 2D contours for two correlated observables from a single constraint
      * - ``constraint-overview``
        - Plots overview of several constraints from the EOS library of experimental and theoretical likelihoods
      * - ``graph``
        - Plots the graph of a function
      * - ``expression``
        - Plots a given expression
      * - ``errorbar``
        - Plots a single errors bar
      * - ``histogram``
        - Plots a 1D histogram of pre-existing random samples
      * - ``histogram2D``
        - Plots a 2D histogram of pre-existing random samples
      * - ``kde``
        - Plots a 1D Kernel Density Estimate (KDE) of pre-existing random samples
      * - ``kde2D``
        - Plots contours of a 2D Kernel Density Estimate (KDE) of pre-existing random samples
      * - ``likelihood2D``
        - Plots contours of a user-provided function
      * - ``observable``
        - Plots a single EOS observable w/o uncertainties as a function of one kinematic variable or one parameter
      * - ``point``
        - Plots a single point
      * - ``signal-pdf``
        - Plots a single EOS signal PDF w/o uncertainties as a function of one kinemtic variable
      * - ``uncertainty``
        - Plots an uncertainty band as a function of one kinematic variable
      * - ``uncertainty-binned``
        - Plots one or more uncertainty band integrated over one kinematic variable
      * - ``watermark``
        - Inserts an EOS watermark into the plots


All item types recognize the following optional keys:

 * ``name`` (*str*, optional) -- The name of the plot item, for convenience when reporting warnings and errors.

 * ``alpha`` (*float*, between 0.0 and 1.0) -- The opacity of the plot item expressed as an alpha value. 0.0 means completely transparent,
   1.0 means completely opaque.

 * ``color`` (*str*, containing any valid Matplotlib color specification) -- The color of the plot item.
   Defaults to one of the colors in the Matplotlib default color cycler.

 * ``label`` (*str*, may contain LaTeX commands) -- The label that appears in the plot's legend for this plot item.

 * ``style`` (*str*, containing any valid Matplotlib style specification) -- The style of the plot item.


.. _constraint:

Plotting Constraints
--------------------

Contents items of type ``constraints`` are used to display one of the built-in `experimental or theoretical constraints <../reference/constraints.html>`_.
The following keys are mandatory:

 * ``constraints`` (:class:`QualifiedName <eos.QualifiedName>` or iterable thereof) -- The name or the list of names of the constraints
   that will be plotted. Must identify at least one of the constraints known to EOS; see `the complete list of constraints <../reference/constraints.html>`_.
 * ``variable`` (*str*) -- The name of the kinematic variable to which the x axis will be mapped.

When plotting multivariate constraints, the following key is also mandatory:

 * ``observable`` (:class:`QualifiedName <eos.QualifiedName>`) -- The name of the observable whose constraints will be plotted.
   Must identify one of the observables known to EOS; see `the complete list of observables <../reference/observables.html>`_.
   This is only mandatory in multivariate constraints, since these can constrain more than one observable simultaneously.

The following keys are optional:

 * ``xrange`` (list of int) -- The interval in which the observable is plotted in the case of a multivariate constraint.
 * ``rescale-by-width`` (*bool*) -- Rescales binned constraints by the inverse of the bin width. This is often required
   to compare theory (integrated) predictions and experimental (averaged) measurements. Defaults to false.

Example:

.. code-block::

   plot_args = {
       'plot': { ... },
       'contents': [
           {
               'label': r'Belle 2015 $\ell=e,\, q=d$',
               'type': 'constraint',
               'color': 'C0',
               'constraints': 'B^0->D^+e^-nu::BRs@Belle:2015A',
               'observable': 'B->Dlnu::BR',
               'variable': 'q2',
               'rescale-by-width': False
           }
       ]
   }

.. _graph:

Plotting a Function Graph
-------------------------

The graph of a function can be easily plotted by providing the coordinates (x, f(x)) of the function.
The coordinates are provided using a ``data`` object containing:

 * ``xvalues`` (array-like of *float*) -- The values on the x axis at which the function has been evaluated.
 * ``yvalues`` (array-like of *float*) -- The values oof the function at the points provided by ``xvalues``.

Example:

.. code-block::

   xvalues = np.linspace(0, 5, 20)
   plot_args = {
       'plot': {
           'x': { 'label': r'$q^2$' },
           'y': { 'label': r'$q^4$' }
       },
       'contents': [
           {
               'label': r'$\ell=\mu$',
               'type': 'graph',
               'data': { 'yvalues': xvalues**2, 'xvalues': xvalues },
               'range': [0, 5],
           },
       ]
   }

.. _histogram:

Plotting Histograms
-------------------

Contents items of type ``histogram`` are used to display samples of a probability density, be it a prior, a posterior, or a signal PDF.
The following key is mandatory:

 * ``data`` (*dict*, see below) -- The data on probability density that will be histogramed.

Within the data object, the following keys are understood.

 * ``samples`` (*list* of *float*) -- The samples that will be histogramed. Mandatory.
 * ``weights`` or ``log_weights`` (*list* of *float*, optional) -- The weights of the samples, on a linear or logarithmic scale.
   Defaults to uniform weights.

Example:

.. code-block::

   analysis = ... # eos.Analysis object as discussed in the example notebook `inference.ipynb`
   parameter_samples, _, = analysis.sample(N=5000, pre_N=1000)
   plot_args = {
       'plot': {
           'x': { 'label': r'$|V_{cb}|$' },
           'y': { 'label': r'$d\mathcal{B}/dq^2$' }
       },
       'contents': [
           {
               'type': 'histogram',
               'data': { 'samples': parameter_samples[:, 0] },
           },
       ]
   }

.. _histogram2D:

Plotting 2D Histograms
----------------------

Contents items of type ``histogram2D`` are used to display samples of a two-dimension probability density,
be it a prior, a posterior, or a signal PDF.
The following key is mandatory:

 * ``data`` (*dict*, see below) -- The data on probability density that will be histogramed.

Within the data object, the following keys are understood.

 * ``samples`` (*list* of *float* with shape (N, 2)) -- The samples that will be histogramed. Mandatory.
 * ``weights`` or ``log_weights`` (*list* of *float* with length N, optional) -- The weights of the samples,
   on a linear or logarithmic scale, respectively. Defaults to uniform weights.

Additional optional keys are:

 * ``bins`` (*int* or *list* of *int*, optional) -- The number of bins for both dimensions together  or in each dimension seperately. Defaults to 100 for both dimensions.

Example:

.. code-block::

   analysis = ... # eos.Analysis object as discussed in the example notebook `inference.ipynb`
   dstarlnu_kinematics = ... # create kineamtics and SignalPDF as discussed in the example notebook `simulation.ipynb`
   dstarlnu_pdf        = ...
   dstarlnu_samples, _ = dstarlnu_pdf.sample_mcmc(N=50000, stride=5, pre_N=1000, preruns=3, rng=rng)
   plot_args = {
       'plot': {
           'x': { 'label': r'$q^2$', 'unit': r'$        extnormal{GeV}^2$', 'range': [ 0.0, 10.50] },
           'y': { 'label': r'$cos(      heta_\ell)$',                     'range': [-1.0,  +1.0] },
       },
       'contents': [
           {
               'label': r'samples ($\ell=\mu$)',
               'type': 'histogram2D',
               'data': {
                   'samples': dstarlnu_samples[:, (0, 1)]
               },
               'bins': 40
           },
       ]
   }
   eos.plot.Plotter(plot_args).plot()

.. _kde:

Plotting Kernel Density Estimates
---------------------------------

Contents items of type ``kde`` are used to display a kernel density estimate (a smooth histogram) of samples of a probability density,
be it a prior, a posterior, or a signal PDF.

The following key is mandatory:

 * ``data`` (*dict*, see below) -- The data on the probability density that will be histogramed.

   Within the data object, the following keys are understood.

    * ``samples`` (*list* of *float*) -- The samples that will be histogramed. Mandatory.
    * ``weights`` or ``log_weights`` (*list* of *float*, optional) -- The weights of the samples, on a linear or logarithmic scale.
      Defaults to uniform weights.


The following keys are optional:

 * ``bandwidth`` (*float*) -- The factor by which the automatically determined kernel bandwidth is scaled. See the SciPy documentation
   for ``gaussian_kde``, ``bw_method='silverman'``. Defaults to 1.
 * ``range`` (*tuple* of two *float*) -- The minimum and maximum value of the x coordinate for which the smooth histogram is plotted.
 * ``level`` (*float*) -- The probability level of the contour. Defaults to ``68.27``.

Example:

.. code-block::

   analysis = ... # eos.Analysis object as discussed in the example notebook `inference.ipynb`
   parameter_samples, _, = analysis.sample(N=5000, pre_N=1000)
   plot_args = {
       'plot': {
           'x': { 'label': r'$|V_{cb}|$', 'range':[38e-3, 45e-3] }
       },
       'contents': [
           {
               'type': 'kde', 'color': C0, 'label': 'posterior', 'bandwidth': 1,
               'range': [40e-3, 45e-3],
               'data': { 'samples': parameter_samples[:, 0] }
           }
       ]
   }

.. _kde2D:

Plotting 2D Kernel Density Estimates
------------------------------------

Contents items of type ``kde2D`` are used to display contours of a two-dimensional
kernel density estimate (a 2D smooth histogram) of samples of a probability density,
be it a prior, a posterior, or a signal PDF.

The following key is mandatory:

 * ``data`` (*dict*, see below) -- The data on the probability density that will be histogramed.

   Within the data object, the following keys are understood.

    * ``samples`` (*list* of *float* with shape (N, 2)) -- The samples that will be histogramed. Mandatory.
    * ``weights`` or ``log_weights`` (*list* of *float*, optional) -- The weights of the samples, on a linear or logarithmic scale.
      Defaults to uniform weights.


The following keys are optional:

 * ``bandwidth`` (*float*) -- The factor by which the automatically determined kernel bandwidth is scaled. See the SciPy documentation
   for ``gaussian_kde``, ``bw_method='silverman'``. Defaults to 1.
 * ``contours`` (a *list* containing ``'lines'``, ``'areas'``, or both) -- The setting for the illustration of the contours.
   If ``'lines'`` is provided, the contour lines are drawn.
   If ``'areas'`` is provided, the contour areas are filled.
   Defaults to ``['lines']``.
 * ``levels`` (*list* of *float*) -- The probability levels of the contours. Defaults to ``[68, 95, 99]``.

Example:

.. code-block::

   analysis = ... # eos.Analysis object as discussed in the example notebook `inference.ipynb`
   parameter_samples, _, = analysis.sample(N=5000, pre_N=1000)
   plot_args = {
       'plot': {
           'x': { 'label': r'$|V_{cb}|$', 'range': [38e-3, 47e-3] },
           'y': { 'label': r'$f_+(0)$',   'range': [0.6, 0.75] },
       },
       'contents': [
           {
               'type': 'kde2D', 'color': 'C1', 'label': 'posterior',
               'levels': [68, 95], 'contours': ['lines','areas'], 'bandwidth':3,
               'data': { 'samples': parameter_samples[:, (0,1)] }
           }
       ]
   }
   eos.plot.Plotter(plot_args).plot()

.. _likelihood2D:

Plotting a user-provided Likelihood
-----------------------------------

The following key is mandatory:

 * ``likelihood`` (*evaluable*, see below) -- The 2D probability density that will be plotted.

The following keys are optional:

 * ``contours`` (a *list* containing ``'lines'``, ``'areas'``, or both) -- The setting for the illustration of the contours.
   If ``'lines'`` is provided, the contour lines are drawn.
   If ``'areas'`` is provided, the contour areas are filled.
   Defaults to ``['lines']``.
 * ``levels`` (*list* of *float*) -- The probability levels of the contours. Defaults to ``[68, 95, 99]``.
 * ``xrange`` (*list* of *float*) -- The x-axis range where the likelihood is evaluated, defaults to the plot ranges if provided.
 * ``yrange`` (*list* of *float*) -- The y-axis range where the likelihood is evaluated, defaults to the plot ranges if provided.

.. _observable:

Plotting Observables
--------------------

Contents items of type ``observable`` are used to display one of the built-in `observables <../reference/observables.html>`_.
The following keys are mandatory:

 * ``observable`` (:class:`QualifiedName <eos.QualifiedName>`) -- The name of the observable that will be plotted.
   Must identify one of the observables known to EOS; see `the complete list of observables <../reference/observables.html>`_.
 * ``range`` (*list* or *tuple* of two *float*) --The tuple of [minimal, maximal] values of the specified kinematic variable
   for which the observable will be evaluated.
 * ``variable`` (*str*) -- The name of the kinematic or parameter variable to which the x axis will be mapped; see
   `the complete list of parameters <../reference/parameters.html>`_.

Example:

.. code-block::

   plot_args = {
       'plot': { ... },
       'contents': [
           {
               'label': r'$\ell=\mu$',
               'type': 'observable',
               'observable': 'B->Dlnu::dBR/dq2;l=mu',
               'variable': 'q2',
               'range': [0.02, 11.60],
           },
       ]
   }

.. _point:

Plotting Points
---------------

Content items of type ``point`` are used to display a single data point manually.
The following keys are mandatory:

 * ``x`` (*number*) -- The point's x coordinate.
 * ``y`` (*number*) -- The point's y coordinate.

Beside the common set of optional keys, this item type recognizes the following optional
keys:

 * ``marker`` (*str*, a valid Matplotlib marker style) -- The point's marker style.
 * ``markersize`` (*number*, a valid Matplotlib marker size) -- The point's marker size in pts.

Example:

.. code-block::

   plot_args = {
       'plot': { ... },
       'contents': [
           {
               'label': r'LCSR (Bharucha 2012)',
               'type': 'point',
               'color': 'C0',
               'x': 0,
               'y': 0.261,
               'marker': 'o',
               'markersize': 12
           }
       ]
   }

.. _uncertainty:

Plotting Uncertainty Bands
--------------------------

Contents items of type ``uncertainty`` are used to display uncertainty bands at 68% probability
for one of the built-in `observables <../reference/observables.html>`_. This item type requires that either
a predictive distribution of the observables has been previously produced.

Exactly one of the following keys is mandatory:

 * ``data`` (*dict*, see below) -- The data on predictive distribution of the observable whose uncertainty band will be plotted.

 * ``data-file`` (*str*, path to an existing data file of type *eos.data.Prediction*) -- The path to
   a data file that was generated with the ``eos-analysis`` command-line client.

For ``data`` object, the following keys are mandatory:

 * ``xvalues`` (array-like of *float*) -- The values on the x axis at which the observable has been evaluated.
 * ``samples`` (*list* of tuples of *float*) -- The list of samples of the predictive distribution. Each tuple of samples
   corresponds to an evaluation of the observables at the kinematic configuration corresponding to the ``xvalues``
   entry with the same index.
 * ``weights`` (array-like of *float*, optional) -- The weights of the samples, on a linear scale. Defaults to uniform weights.

The following keys are optional:

 * ``band`` (a *list* containing ``'lines'``, ``'areas'``, or both) -- The setting for the illustration of the band.
   If ``'outer'`` is provided, the band's outer lines are drawn.
   If ``'median'`` is provided, the band's median line is drawn.
   If ``'area'`` is provided, the band's areas are filled.
   Defaults to ``['area', 'outer', 'median']``.
 * ``interpolation-type`` (*str*) -- The type of interpolation to be used for the band. Can be either ``linear`` (default) or ``cubic``.
 * ``plot-data`` (*bool*) -- If set to ``True``, the data points are plotted on top of the band.

Example:

.. code-block::

   analysis = ... # eos.Analysis object as discussed in the example notebook `predictions.ipynb`
   mu_q2values = numpy.unique(numpy.concatenate((numpy.linspace(0.02,1.00,20), numpy.linspace(1.00,11.60,20))))
   mu_obs      = [eos.Observable.make('B->Dlnu::dBR/dq2', prior.parameters,
                                      eos.Kinematics(q2=q2), eos.Options({'form-factors':'BSZ2015','l':'mu'}))
                  for q2 in mu_q2values]
   _, _, mu_samples = analysis.sample(N=5000, pre_N=1000, observables=mu_obs)
   plot_args = {
       'plot': {
           'x': { 'label': r'$q^2$' },
           'y': { 'label': r'$d\mathcal{B}/dq^2$' }
       },
       'contents': [
           {
               'label': r'$\ell=\mu$',
               'type': 'uncertainty',
               'data': { 'samples': mu_samples, 'xvalues': mu_q2values },
               'range': [0.02, 11.60],
           },
       ]
   }



****************
Plotting Classes
****************

.. note::

   Import :py:mod:`eos.figure` before you do something like ``import matplotlib.pyplot as plt``,
   because the :py:mod:`eos.figure` module modified the default plot style and the matplotlib backend.
   All options (except the backend) can be overwritten by updating ``matplotlib.rcParams[...]``;
   see also the `matplotlib <https://matplotlib.org/>`_ documentation.
   Note that the default settings use LaTeX to create labels and math expressions,
   so for this to work latex needs to be available on your system.


EOS also provides a new plotting framework with a different interface, which will replace
the existing framework as soon as it is feature complete. Within the new framework, Figures
are created using the :py:class:`eos.figure.FigureFactory` class, which returns an object
of a class descended by :py:class:`eos.figure.Figure`. The figure is responsible for creating
and managing the `matplotlib <https://matplotlib.org/>`_ figure object. It also creates the
plot or plots that are contained in the figure as objects of classes descended from
:py:class:`eos.figure.plot.Plot`. These objects manage the axes of the figure and
the individual plot items that are contained in the plot. The actual contents are created using
the :py:class:`eos.figure.ItemFactory` class, which returns an object of a class descended from
:py:class:`eos.figure.items.Item`. The item is responsible for creating the actual
plot item, such as the curve of an EOS observable, a scatter plot of parameters, a histogram
or a kernel density estimate, to name some of the options.


`Figure` and Related Classes
============================


.. autoclass:: eos.figure.Figure
   :members:

   .. note::

      The :py:class:`eos.figure.plot.Plot` class is the base class for all plot items.
      It is not intended to be used directly. To create a a concrete plot, use the :class:`PlotFactory <eos.figure.PlotFactory>` class.


.. autoclass:: eos.figure.FigureFactory
   :members:

   The list of available figure types is as follows:


   .. list-table::
      :widths: auto
      :header-rows: 1

      * - figure type
        - Python class
        - description
      * - ``single``
        - :py:class:`eos.figure.SingleFigure`
        - Produces a figure with a single plot.
      * - ``inset``
        - :py:class:`eos.figure.InsetFigure`
        - Produces an inset figure with a main plot and a smaller inset plot.
      * - ``grid``
        - :py:class:`eos.figure.GridFigure`
        - Produces a figure with a configurable number of plots, arranged in a grid.
      * - ``corner``
        - :py:class:`eos.figure.CornerFigure`
        - Produces a corner figure, i.e., a figure with a triangular arrangement of 1D and 2D marginal PDFs.

.. autoclass:: eos.figure.SingleFigure
   :members:

.. autoclass:: eos.figure.InsetFigure
   :members:

.. autoclass:: eos.figure.GridFigure
   :members:

.. autoclass:: eos.figure.CornerFigure
   :members:



.. autoclass:: eos.figure.Inset
   :members:


`Plot` and Related Classes
==========================


.. autoclass:: eos.figure.Plot
   :members:

   .. note::

      The :py:class:`eos.figure.Plot` class is the base class for all plot items.
      It is not intended to be used directly. To create a a concrete plot, use the :class:`PlotFactory <eos.figure.PlotFactory>` class.


.. autoclass:: eos.figure.PlotFactory
   :members:


   The list of available plot types is as follows:

   .. list-table::
      :widths: auto
      :header-rows: 1

      * - plot type
        - Python class
        - description
      * - ``2D``
        - :py:class:`eos.figure.TwoDimensionalPlot`
        - Draws a 2D plot along a single set of axes.
      * - ``empty``
        - :py:class:`eos.figure.EmptyPlot`
        - Draws an empty plot.


.. autoclass:: eos.figure.TwoDimensionalPlot
   :members:

.. autoclass:: eos.figure.EmptyPlot
   :members:



.. autoclass:: eos.figure.Grid
   :members:


.. autoclass:: eos.figure.Legend
   :members:


.. autoclass:: eos.figure.XAxis
   :members:


.. autoclass:: eos.figure.XTicks
   :members:


.. autoclass:: eos.figure.YAxis
   :members:


.. autoclass:: eos.figure.YTicks


`Item` and Related Classes
==========================


.. autoclass:: eos.figure.item.Item
   :members:

   .. note::

      The :py:class:`eos.figure.item.Item` class is the base class for all plot items.
      It is not intended to be used directly. To create a a concrete plot item, use the :class:`ItemFactory <eos.figure.ItemFactory>` class.


.. autoclass:: eos.figure.item.ItemFactory
   :members:

   The list of available item types is as follows:


   .. list-table::
      :widths: auto
      :header-rows: 1

      * - item type
        - Python class
        - description
      * - ``observable``
        - :py:class:`ObservableItem`
        - Plots an observables from the EOS library of builtin observables.
      * - ``uncertainty``
        - :py:class:`UncertaintyBandItem`
        - Plots the 68% uncertainty band as a function of one kinematic variable or one parameter.
      * - ``uncertainty-binned``
        - :py:class:`BinnedUncertaintyItem`
        - Plots one or more uncertainty band integrated over one kinematic variable.
      * - ``constraint``
        - :py:class:`ConstraintItem`
        - Plots statistical constraints from the EOS library of experimental and theoretical likelihoods.
      * - ``histogram1D``
        - :py:class:`OneDimensionalHistogramItem`
        - Plots a one-dimensional histogram.
      * - ``histogram2D``
        - :py:class:`TwoDimensionalHistogramItem`
        - Plots a two-dimensional histogram.
      * - ``kde1D``
        - :py:class:`OneDimensionalKernelDensityEstimateItem`
        - Plotting a one-dimensional kernel density estimate (KDE).
      * - ``kde2D``
        - :py:class:`TwoDimensionalKernelDensityEstimateItem`
        - Plots a two-dimensional kernel density estimate (KDE).
      * - ``band``
        - :py:class:`BandItem`
        - Plots a shaded band.
      * - ``signal-pdf``
        - :py:class:`SignalPDFItem`
        - Plots a single EOS signal PDF w/o uncertainties as a function of one kinematic variable
      * - ``complex-plane``
        - :py:class:`ComplexPlaneItem`
        - Plots a single observable as a function on the complex plan


.. autoclass:: eos.figure.item.ObservableItem
   :members:

.. autoclass:: eos.figure.item.UncertaintyBandItem
   :members:

.. autoclass:: eos.figure.item.BinnedUncertaintyItem
   :members:

.. autoclass:: eos.figure.item.ConstraintItem
   :members:

.. autoclass:: eos.figure.item.OneDimensionalHistogramItem
   :members:

.. autoclass:: eos.figure.item.TwoDimensionalHistogramItem
   :members:

.. autoclass:: eos.figure.item.OneDimensionalKernelDensityEstimateItem
   :members:

.. autoclass:: eos.figure.item.TwoDimensionalKernelDensityEstimateItem
   :members:

.. autoclass:: eos.figure.item.BandItem
   :members:

.. autoclass:: eos.figure.item.SignalPDFItem
   :members:

.. autoclass:: eos.figure.item.ComplexPlaneItem
   :members:



Utility Classes
===============


.. autoclass:: eos.figure.DataFile
   :members:


.. autoclass:: eos.figure.Watermark
   :members:
